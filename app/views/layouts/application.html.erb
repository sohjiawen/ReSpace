<!DOCTYPE html>
<html>
<head>
  <title>Respace</title>
  <%= csrf_meta_tags %>
  <%= csp_meta_tag %>

  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  <%= stylesheet_link_tag 'application', media: 'all', 'data-turbolinks-track': 'reload' %>

  <%= javascript_pack_tag 'application', 'data-turbolinks-track': 'reload', defer: true %>
  <script>
		// WebXR requires HTTPS, so the site doesn't work if someone manually enters
		// the URL and ends up using HTTP. To work around this, force redirect from
		// http to https for non-localhost addresses.
		if (window.location.protocol == "http:" &&
      window.location.hostname != "localhost" &&
      window.location.hostname != "127.0.0.1" &&
      window.location.hostname != "[::1]") {
			//window.location = window.location.href.replace('http:', 'https:');
  }
</script>

<!-- import the webpage's javascript files -->
<script src="https://rawgit.com/aframevr/aframe/master/dist/aframe-master.min.js"></script>
<script src="https://unpkg.com/aframe-extras@3.3.0/dist/aframe-extras.min.js"></script>
<script src="https://unpkg.com/aframe-environment-component@1.1.0/dist/aframe-environment-component.min.js"></script>

<script>
		// Define a few custom components useful for AR mode. While these are somewhat reusable,
      // I recommend checking if there are officially supported alternatives before copying
      // these into new projects.

      AFRAME.registerComponent("hide-in-ar-mode", {
        // Set this object invisible while in AR mode.
        init: function() {
          this.el.sceneEl.addEventListener("enter-vr", ev => {
            this.wasVisible = this.el.getAttribute("visible");
            if (this.el.sceneEl.is("ar-mode")) {
              this.el.setAttribute("visible", false);
            }
          });
          this.el.sceneEl.addEventListener("exit-vr", ev => {
            if (this.wasVisible) this.el.setAttribute("visible", true);
          });
        }
      });

      AFRAME.registerComponent("ar-shadows", {
        // Swap an object's material to a transparent shadows-only material while
        // in AR mode. Intended for use with a ground plane. The object is also
        // set visible while in AR mode, this is useful if it's hidden in other
        // modes due to them using a 3D environment.
        schema: {
          opacity: { default: 0.3 }
        },
        init: function() {
          this.el.sceneEl.addEventListener("enter-vr", ev => {
            this.wasVisible = this.el.getAttribute("visible");
            if (this.el.sceneEl.is("ar-mode")) {
              this.savedMaterial = this.el.object3D.children[0].material;
              this.el.object3D.children[0].material = new THREE.ShadowMaterial();
              this.el.object3D.children[0].material.opacity = this.data.opacity;
              this.el.setAttribute("visible", true);
            }
          });
          this.el.sceneEl.addEventListener("exit-vr", ev => {
            if (this.savedMaterial) {
              this.el.object3D.children[0].material = this.savedMaterial;
              this.savedMaterial = null;
            }
            if (!this.wasVisible) this.el.setAttribute("visible", false);
          });
        }
      });

      AFRAME.registerComponent("ar-hit-test", {
        init: function() {
          // document.getElementById("reticle").setAttribute("visible", true);
          this.xrHitTestSource = null;
          this.viewerSpace = null;
          this.refSpace = null;

          this.el.sceneEl.renderer.xr.addEventListener("sessionend", ev => {
            this.viewerSpace = null;
            this.refSpace = null;
            this.xrHitTestSource = null;
          });
          this.el.sceneEl.renderer.xr.addEventListener("sessionstart", ev => {
            let session = this.el.sceneEl.renderer.xr.getSession();
            // 'element' refers to the reticle
            let element = this.el;
            // Using the 'select' event listener, when the user taps the screen,
            // the object will be placed in the camera view based on the pose of the reticle
            session.addEventListener("select", function() {
              // 'position' stores position of reticle
              let position = element.getAttribute("position");
              // Now, we set position of dino and light based on position of reticle
              document.getElementById("poly_furniture").setAttribute("position", position);
              document.getElementById("light").setAttribute("position", {
                x: position.x - 2,
                y: position.y + 4,
                z: position.z + 2
              });
            });
            // Reference spaces express relationships between an origin and the world.
            // In this sample, the viewer and the controller are the same device.
            // What we draw it must be stable with regards to the environment,
            // but the 'controller' I'm drawing with is moving.
            // To solve this, requestReferenceSpace() is called twice - for viewer and for local space.

            // For hit testing, I use the viewer reference space, which is based on
            // the device's pose at the time of the hit test. After getting this,
            // I call requestHitTestSource(), which creates the source of
            // hit test data that I'll use when drawing.
            session.requestReferenceSpace("viewer").then(space => {
              this.viewerSpace = space;
              session
              .requestHitTestSource({ space: this.viewerSpace })
              .then(hitTestSource => {
                this.xrHitTestSource = hitTestSource;
              });
            });
            // For image drawing, I use the local reference space, which gives me
            // stability in terms of the environment.
            session.requestReferenceSpace("local-floor").then(space => {
              this.refSpace = space;
            });
          });
        },
        tick: function() {
          if (this.el.sceneEl.is("ar-mode")) {
            if (!this.viewerSpace) return;

            let frame = this.el.sceneEl.frame;
            let xrViewerPose = frame.getViewerPose(this.refSpace);

            // To draw anything in AR, I need to know where the viewer (this.xrHitTestSource) is
            // and where they're looking (xrViewerPose).
            // So I test that hitTestSource and the xrViewerPose are still valid.
            if (this.xrHitTestSource && xrViewerPose) {
              // Now I call getHitTestResults(). It takes the hitTestSource as an argument and returns
              // an array of HitTestResult instances.
              let hitTestResults = frame.getHitTestResults(
                this.xrHitTestSource
                );

              // The hit test may find multiple surfaces. The first one in the array is the one closest to the camera.
              if (hitTestResults.length > 0) {
                // Finally, I need to process the hit test results. The basic process is this.
                // Get a pose from the hit test result, transform (move) the reticle image to the hit test position.
                // The pose represents the pose of a point on a surface.
                let pose = hitTestResults[0].getPose(this.refSpace);

                let inputMat = new THREE.Matrix4();
                inputMat.fromArray(pose.transform.matrix);

                let position = new THREE.Vector3();
                position.setFromMatrixPosition(inputMat);
                this.el.setAttribute("position", position);
              }
            }
          }
        }
      });

AFRAME.registerComponent("exit-ar-button", {
  schema: {
          // 	selector: Calls querySelector (e.g., "#box" to <a-entity id="box">)
          element: { type: "selector" }
        },
        init: function() {
          this.data.element.addEventListener("click", ev => {
            this.el.sceneEl.renderer.xr.getSession().end();
          });
        }
      });
    </script>
  </head>

  <body>

      <%= render 'shared/flashes' %>

      <%= yield %>
    </div>
    <% unless current_page?(new_user_session_path)||current_page?(new_user_registration_path)||current_page?(root_path) %>
    <%= render 'shared/navbar' %>
    <% end %>
  </body>
  </html>
